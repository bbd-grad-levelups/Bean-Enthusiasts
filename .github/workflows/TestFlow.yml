# This is a basic workflow to help you get started with Actions
name: Connect to an AWS role from a GitHub repository

# Controls when the action will run. Invokes the workflow on push events but only for the main branch
on:
  push:
    branches: [ feature/enhanced_deployments ]
  pull_request:
    branches: [ No_branch ]

env:
  
  AWS_REGION : eu-west-1 #Change to reflect your Region
  APPLICATION_NAME: BeanClient
  RELEASE_VERSION: 2
  BUCKET_NAME: DeployBucket


# Permission can be added at job level or workflow level    
permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout
jobs:
  AssumeRoleAndCallIdentity:
    runs-on: ubuntu-latest
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: arn:aws:iam::363615071302:role/GitHub_Actions
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Java
        uses: actions/setup-java@v2
        with: 
          distribution: 'adopt'
          java-version: '21'

      - name: Build Server Application
        run: |
          cd shared_resources
          mvn clean install
          cd ../Server
          mvn clean package
          zip -r target/BeanClient.zip target/*.jar
          cd target
          ls
          cd ..
      
      - name: Install Elastic Beanstalk CLI
        run: |
          sudo apt-get install python3-pip
          pip3 install awsebcli --upgrade --user
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Check if S3 bucket exists
        id: check_bucket
        run: |
          aws s3api head-bucket --bucket $S3_BUCKET_NAME 2>/dev/null || echo '{"BucketExists": false}'
        continue-on-error: true
      
      - name: Create S3 Bucket
        if: steps.check_bucket.outputs.BucketExists == 'false'
        run: |
          aws s3 mb s3://$${{ env.BUCKET_NAME }} --region ${{ env.AWS_REGION }}

      - name: Deploy to Elastic Beanstalk
        run: |
          aws elasticbeanstalk create-application-version \
            --application-name ${{ env.APPLICATION_NAME }} \
            --version-label ${{ env.RELEASE_VERSION }} \
            --source-bundle S3Bucket=${{ env.BUCKET_NAME }},S3Key=${{ env.APPLICATION_NAME }}.zip
          aws elasticbeanstalk update-environment \
            --application-name YourApplicationName \
            --environment-name YourEnvironmentName \
            --version-label YourVersionLabel
    
